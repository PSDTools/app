name: pirate_code
description: An app for the Pattonville School District.
# The following line prevents the package from being accidentally published to
# pub.dev using `flutter pub publish`. This is preferred for private packages.
publish_to: "none" # Remove this line if you wish to publish to pub.dev

# The following defines the version and build number for your application.
# A version number is three numbers separated by dots, like 1.2.43
# followed by an optional build number separated by a +.
# Both the version and the builder number may be overridden in flutter
# build by specifying --build-name and --build-number, respectively.
# In Android, build-name is used as versionName while build-number used as versionCode.
# Read more about Android versioning at https://developer.android.com/studio/publish/versioning
# In iOS, build-name is used as CFBundleShortVersionString while build-number is used as CFBundleVersion.
# Read more about iOS versioning at
# https://developer.apple.com/library/archive/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html
# In Windows, build-name is used as the major, minor, and patch parts
# of the product and file versions while build-number is used as the build suffix.
version: 0.0.1+1
homepage: https://PSDTools.github.io
documentation: https://github.com/PSDTools/app
issue_tracker: https://github.com/PSDTools/app/issues
repository: https://github.com/PSDTools/app.git

environment:
  sdk: "^3.0.5"
  flutter: "^3.10.5"

# Dependencies specify other packages that your package needs in order to work.
# To automatically upgrade your package dependencies to the latest versions
# consider running `flutter pub upgrade --major-versions`. Alternatively,
# dependencies can be manually updated by changing the version numbers below to
# the latest version available on pub.dev. To see which dependencies have newer
# versions available, run `flutter pub outdated`.
dependencies:
  appwrite: ^9.0.1
  auto_route: ^7.8.0
  # The following adds the Cupertino Icons font to your application.
  # Use with the CupertinoIcons class for iOS style icons.
  cupertino_icons: ^1.0.5 # Only required if you use Cupertino (iOS style) icons
  device_info_plus: ^9.0.3
  flutter:
    sdk: flutter
  flutter_localizations: # Required to enable localization
    sdk: flutter
  flutter_riverpod: ^2.3.7
  flutter_web_plugins:
    sdk: flutter
  freezed_annotation: ^2.2.0
  google_fonts: ^4.0.4
  intl: ^0.18.0
  io: ^1.0.4
  logging: ^1.2.0
  meta: ^1.9.1
  riverpod_annotation: ^2.1.2
  widgetbook: ^3.1.0
  widgetbook_annotation: ^3.0.0

dev_dependencies:
  auto_route_generator: ^7.3.1
  build_runner: ^2.4.6
  build_web_compilers: ^4.0.5
  custom_lint: ^0.4.0
  dart_define: ^2.1.0
  dhttpd: ^4.0.1
  # flutter_gen_linter: ^1.0.0+2
  flutter_gen_runner: ^5.3.1
  flutter_launcher_icons: ^0.13.1
  flutter_native_splash: ^2.3.2
  flutter_test: # Required for a Flutter project that includes tests
    sdk: flutter
  freezed: ^2.4.0
  # integration_test:
  #   sdk: flutter
  freezed_lint: ^0.0.1-dev
  json_serializable: ^6.7.1
  mocktail: ^1.0.0
  riverpod_generator: ^2.2.4
  riverpod_lint: ^1.4.0
  very_good_analysis: ^5.0.0+1
  very_good_cli: ^0.15.0
  widgetbook_generator: ^3.0.0

# For information on the generic Dart part of this file, see the
# following page: https://dart.dev/tools/pub/pubspec

# The following section is specific to Flutter packages.
flutter:
  # The following line ensures that the Material Icons font is
  # included with your application, so that you can use the icons in
  # the material Icons class.
  uses-material-design: true # Required if you use the Material icon font

  # Enables generation of localized strings from arb files, see
  # https://docs.flutter.dev/accessibility-and-localization/
  generate: false

  # To add assets to your application, add an assets section, like this:
  assets: # Lists assets, such as image files
    - assets/applets/
    - assets/icon/icon.png

  # An image asset can refer to one or more resolution-specific "variants", see
  # https://flutter.dev/assets-and-images/#resolution-aware

  # For details regarding adding assets from package dependencies, see
  # https://flutter.dev/assets-and-images/#from-packages

  # To add custom fonts to your application, add a fonts section here,
  # in this "flutter" section. Each entry in this list should have a
  # "family" key with the font family name, and a "fonts" key with a
  # list giving the asset and other descriptors for the font. For
  # an example, see below:
  # fonts: # Required if your app uses custom fonts
  # For details regarding fonts from package dependencies,
  # see https://flutter.dev/custom-fonts/#from-packages

dart_define:
  variables:
    - name: PROJECT_ID
      description: Appwrite project ID
      default: 648b3836d14e06cddc4e
      required: false
    - name: API_ENDPOINT
      description: Appwrite API endpoint
      default: https://cloud.appwrite.io/v1
      required: false
    - name: DATABASE_ID
      description: Appwrite database ID
      default: 649f3267b89f7b4dfc4b
      required: false
    - name: COLLECTION_ID
      description: Appwrite collection ID
      default: 649f327c108ef9b8bfb2
      required: false

# dart run flutter_launcher_icons
flutter_launcher_icons:
  image_path: "assets/icon/icon.png"

  android: "launcher_icon"
  image_path_android: "assets/icon/icon.png"
  min_sdk_android: 21 # android min sdk min:16, default 21
  # adaptive_icon_background: "assets/icon/background.png"
  # adaptive_icon_foreground: "assets/icon/foreground.png"

  ios: true
  image_path_ios: "assets/icon/icon.png"
  remove_alpha_channel_ios: true

  web:
    generate: true
    image_path: "assets/icon/icon.png"
    background_color: "#000000"
    theme_color: "#FFFFFF"

  windows:
    generate: true
    image_path: "assets/icon/icon.png"
    icon_size: 48 # min:48, max:256, default: 48

  macos:
    generate: true
    image_path: "assets/icon/icon.png"

flutter_native_splash:
  # This package generates native code to customize Flutter's default white native splash screen
  # with background color and splash image.
  # Customize the parameters below, and run the following command in the terminal:
  # dart run flutter_native_splash:create
  # To restore Flutter's default white splash screen, run the following command in the terminal:
  # dart run flutter_native_splash:remove

  # color or background_image is the only required parameter.  Use color to set the background
  # of your splash screen to a solid color.  Use background_image to set the background of your
  # splash screen to a png image.  This is useful for gradients. The image will be stretch to the
  # size of the app. Only one parameter can be used, color and background_image cannot both be set.
  color: "#008CFF"
  # background_image: "assets/background.png"

  # Optional parameters are listed below.  To enable a parameter, uncomment the line by removing
  # the leading # character.

  # The image parameter allows you to specify an image used in the splash screen.  It must be a
  # png file and should be sized for 4x pixel density.
  image: assets/icon/icon.png

  # The branding property allows you to specify an image used as branding in the splash screen.
  # It must be a png file. It is supported for Android, iOS and the Web.  For Android 12,
  # see the Android 12 section below.
  # branding: assets/dart.png

  # To position the branding image at the bottom of the screen you can use bottom, bottomRight,
  # and bottomLeft. The default values is bottom if not specified or specified something else.
  branding_mode: bottom

  # The color_dark, background_image_dark, image_dark, branding_dark are parameters that set the background
  # and image when the device is in dark mode. If they are not specified, the app will use the
  # parameters from above. If the image_dark parameter is specified, color_dark or
  # background_image_dark must be specified.  color_dark and background_image_dark cannot both be
  # set.
  # color_dark: "#042a49"
  # background_image_dark: "assets/dark-background.png"
  # image_dark: assets/splash-invert.png
  # branding_dark: assets/dart_dark.png

  # Android 12 handles the splash screen differently than previous versions.  Please visit
  # https://developer.android.com/guide/topics/ui/splash-screen
  # Following are Android 12 specific parameter.
  android_12:
    # The image parameter sets the splash screen icon image.  If this parameter is not specified,
    # the app's launcher icon will be used instead.
    # Please note that the splash screen will be clipped to a circle on the center of the screen.
    # App icon with an icon background: This should be 960×960 pixels, and fit within a circle
    # 640 pixels in diameter.
    # App icon without an icon background: This should be 1152×1152 pixels, and fit within a circle
    # 768 pixels in diameter.
    image: assets/android12splash.png

    # Splash screen background color.
    color: "#42a5f5"

    # App icon background color.
    icon_background_color: "#111111"

    # The branding property allows you to specify an image used as branding in the splash screen.
    # branding: assets/dart.png

    # The image_dark, color_dark, icon_background_color_dark, and branding_dark set values that
    # apply when the device is in dark mode. If they are not specified, the app will use the
    # parameters from above.
    # image_dark: assets/android12splash-invert.png
    # color_dark: "#042a49"
    # icon_background_color_dark: "#eeeeee"

  # The android, ios and web parameters can be used to disable generating a splash screen on a given
  # platform.
  # android: false
  # ios: false
  # web: false

  # Platform specific images can be specified with the following parameters, which will override
  # the respective parameter.  You may specify all, selected, or none of these parameters:
  # color_android: "#42a5f5"
  # color_dark_android: "#042a49"
  # color_ios: "#42a5f5"
  # color_dark_ios: "#042a49"
  # color_web: "#42a5f5"
  # color_dark_web: "#042a49"
  # image_android: assets/splash-android.png
  # image_dark_android: assets/splash-invert-android.png
  # image_ios: assets/splash-ios.png
  # image_dark_ios: assets/splash-invert-ios.png
  # image_web: assets/splash-web.gif
  # image_dark_web: assets/splash-invert-web.gif
  # background_image_android: "assets/background-android.png"
  # background_image_dark_android: "assets/dark-background-android.png"
  # background_image_ios: "assets/background-ios.png"
  # background_image_dark_ios: "assets/dark-background-ios.png"
  # background_image_web: "assets/background-web.png"
  # background_image_dark_web: "assets/dark-background-web.png"
  # branding_android: assets/brand-android.png
  # branding_dark_android: assets/dart_dark-android.png
  # branding_ios: assets/brand-ios.gif
  # branding_dark_ios: assets/dart_dark-ios.gif

  # The position of the splash image can be set with android_gravity, ios_content_mode, and
  # web_image_mode parameters.  All default to center.
  #
  # android_gravity can be one of the following Android Gravity (see
  # https://developer.android.com/reference/android/view/Gravity): bottom, center,
  # center_horizontal, center_vertical, clip_horizontal, clip_vertical, end, fill, fill_horizontal,
  # fill_vertical, left, right, start, or top.
  android_gravity: center
  #
  # ios_content_mode can be one of the following iOS UIView.ContentMode (see
  # https://developer.apple.com/documentation/uikit/uiview/contentmode): scaleToFill,
  # scaleAspectFit, scaleAspectFill, center, top, bottom, left, right, topLeft, topRight,
  # bottomLeft, or bottomRight.
  ios_content_mode: scaleToFill
  #
  # web_image_mode can be one of the following modes: center, contain, stretch, and cover.
  web_image_mode: center

  # The screen orientation can be set in Android with the android_screen_orientation parameter.
  # Valid parameters can be found here:
  # https://developer.android.com/guide/topics/manifest/activity-element#screen
  # android_screen_orientation: sensorLandscape

  # To hide the notification bar, use the fullscreen parameter.  Has no effect in web since web
  # has no notification bar.  Defaults to false.
  # NOTE: Unlike Android, iOS will not automatically show the notification bar when the app loads.
  #       To show the notification bar, add the following code to your Flutter app:
  #       WidgetsFlutterBinding.ensureInitialized();
  #       SystemChrome.setEnabledSystemUIMode(SystemUiMode.manual, overlays: [SystemUiOverlay.bottom, SystemUiOverlay.top], );
  fullscreen: true

  # If you have changed the name(s) of your info.plist file(s), you can specify the filename(s)
  # with the info_plist_files parameter.
  # info_plist_files:
  #   - 'ios/Runner/Info-Debug.plist'
  #   - 'ios/Runner/Info-Release.plist'
